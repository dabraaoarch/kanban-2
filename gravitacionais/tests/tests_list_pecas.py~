from django.test import TestCase
from django.urls import reverse, resolve
from ..views import index
from ..models import Peca, Aplicacao
from gravitacionais.models import Gravitacional

class PecasTests(TestCase):
    def cria_pecas(
            self,
            codigo_peca='123',
            nome_peca='peca'
    ):
        '''
        Create an item object to run the tests
        '''
        return Peca.objects.create(
            codigo_peca=codigo_peca,
            nome_peca=nome_peca
        )

    def cria_aplicacao(
            self,
            peca,
            gravitacional=None,
            quantidade = 10,
            descricao = 'aplicacao de teste'
    ):
        '''
        Create an application object to run the tests
        '''
        if gravitacional == None:
            gravitacional = self.cria_gravitacional()
            
        return Aplicacao.objects.create(
            peca_aplicacao=peca,
            quantidade=quantidade,
            descricao=descricao,
            gravitacional_aplicacao = gravitacional
        )

    def cria_gravitacional(
            self,
            codigo = '123',
            nome_gravitacional = 'AB-CD-123',
            descricao = 'gravitacional de ilha',
            posto = '10',
            linha = '3',
            galpao = 'A'
    ):
        '''
        Create a gravitacional object for run the tests
        '''
        return Gravitacional.objects.create(
            codigo = codigo,
            nome_gravitacional = nome_gravitacional,
            descricao=descricao,
            posto=posto,
            linha=linha,
            galpao=galpao,
        )
    
    def load_page(self):
        '''
        Get the page to run the tests
        '''
        url = reverse('pecas:index')
        return self.client.get(url)
        
    def test_pecas_list_view_status_code(self):
        '''
        For a correct url the return status code must be 200
        '''
        response = self.load_page()
        self.assertEquals(response.status_code,200)

    def test_pecas_list_view_no_pecas_found(self):
        '''
        If no items were found in the database, the page
        must show a 'No items found' message
        '''
        response = self.load_page()
        self.assertContains(response, 'Sem pe√ßas para listagem', 1)

    def test_resolve_peca_list_view(self):
        '''
        The correct url should display the content discribed in
        the view
        '''
        view = resolve('/pecas/')
        self.assertEquals(view.func, index)

    def test_peca_list_view_with_peca(self):
        '''
        If some item is already registered, the table should
        display the four collumns related do the item
        '''
        peca = self.cria_pecas()
        response = self.load_page()
        self.assertContains(response, '<td', 4)
        self.assertQuerysetEqual(response.context['pecas'], [peca])
        
    def test_peca_list_view_without_peca(self):
        '''
        If there is no item in db, the table should not
        display any line
        '''
        response = self.load_page()
        self.assertContains(response, '<td', 0)
        self.assertQuerysetEqual(response.context['pecas'], [])

    def test_peca_contains_aplicacao(self):
        '''
        If there are aplications for the item, it should be
        counted and displayed correctly on the table
        with a link to the specific applications
        '''
        peca = self.cria_pecas()
        gravitacional = self.cria_gravitacional()
        aplicacao = self.cria_aplicacao(
            peca=peca,
            gravitacional=gravitacional
        )
        response = self.load_page()
        self.assertContains(
            response,
            "<a href='{}'".format(
                reverse('pecas:aplicacoes',
                        kwargs= { 'peca_id' : peca.id}
                        )
            ),
            1
        )
        
        
        
        
